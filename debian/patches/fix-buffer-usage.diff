Description: Replace Buffer() by Buffer.from()
Author: Xavier Guimard <yadd@debian.org>
Forwarded: no
Last-Update: 2020-03-03

--- a/test/not-string.js
+++ b/test/not-string.js
@@ -4,5 +4,5 @@
 parser.onopentag = function (node) {
   t.same(node, { name: 'x', attributes: {}, isSelfClosing: false })
 }
-var xml = new Buffer('<x>y</x>')
+var xml = new Buffer.from('<x>y</x>')
 parser.write(xml).close()
--- a/test/utf8-split.js
+++ b/test/utf8-split.js
@@ -1,23 +1,23 @@
 var tap = require('tap')
 var saxStream = require('../lib/sax').createStream()
 
-var b = new Buffer('误')
+var b = new Buffer.from('误')
 
 saxStream.on('text', function (text) {
   tap.equal(text, b.toString())
 })
 
-saxStream.write(new Buffer('<test><a>'))
+saxStream.write(new Buffer.from('<test><a>'))
 saxStream.write(b.slice(0, 1))
 saxStream.write(b.slice(1))
-saxStream.write(new Buffer('</a><b>'))
+saxStream.write(new Buffer.from('</a><b>'))
 saxStream.write(b.slice(0, 2))
 saxStream.write(b.slice(2))
-saxStream.write(new Buffer('</b><c>'))
+saxStream.write(new Buffer.from('</b><c>'))
 saxStream.write(b)
-saxStream.write(new Buffer('</c>'))
-saxStream.write(Buffer.concat([new Buffer('<d>'), b.slice(0, 1)]))
-saxStream.end(Buffer.concat([b.slice(1), new Buffer('</d></test>')]))
+saxStream.write(new Buffer.from('</c>'))
+saxStream.write(Buffer.concat([new Buffer.from('<d>'), b.slice(0, 1)]))
+saxStream.end(Buffer.concat([b.slice(1), new Buffer.from('</d></test>')]))
 
 var saxStream2 = require('../lib/sax').createStream()
 
@@ -25,10 +25,10 @@
   tap.equal(text, '�')
 })
 
-saxStream2.write(new Buffer('<root>'))
-saxStream2.write(new Buffer('<e>'))
-saxStream2.write(new Buffer([0xC0]))
-saxStream2.write(new Buffer('</e>'))
-saxStream2.write(Buffer.concat([new Buffer('<f>'), b.slice(0, 1)]))
-saxStream2.write(new Buffer('</root>'))
+saxStream2.write(new Buffer.from('<root>'))
+saxStream2.write(new Buffer.from('<e>'))
+saxStream2.write(new Buffer.from([0xC0]))
+saxStream2.write(new Buffer.from('</e>'))
+saxStream2.write(Buffer.concat([new Buffer.from('<f>'), b.slice(0, 1)]))
+saxStream2.write(new Buffer.from('</root>'))
 saxStream2.end()
